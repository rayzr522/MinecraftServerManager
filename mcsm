#!/bin/bash

# The name of the program.
PROG="$(basename "$0")"

# Config location
SETTINGS_DIR="$HOME/.config/mcsm"
CONFIG="$SETTINGS_DIR/settings.cfg"

# Config template
CONFIG_TEMPLATE="$(cat << END_CONFIG_TEMPLATE
# The name of your server. This is for display-purposes only.
server_name="My Minecraft Server"
# The name of the screen service.
service_name="minecraftServer"
# The root directory of your server.
server_home_directory="/your/server/directory"
# The JAR file to run for your server.
# If there is a 'start.sh' script in your server home directory,
# then the server_jar will be ignored.
server_jar="spigot-1.12.2.jar"
# The maximum amount of memory to use.
max_memory="2048M"
# Extra parameters to be passed to the JAR file. This is also
# ignored if a 'start.sh' script is found.
extra_params="nogui"
# How many seconds to wait before shutting the down when
# running 'mcsm stop'.
time_before_shutdown=30
END_CONFIG_TEMPLATE
)"

# General utility methods
log() {
  echo "$(tput setaf 1)[$(tput setaf 3)MCSM$(tput setaf 1)]$(tput sgr0) $(tput bold)$*$(tput sgr0)"
}

fail() {
  log "$(tput setaf 1)$*" 1>&2
  exit 1
}

# MCSM system
mcsm::setup() {
  if [[ ! -d "$SETTINGS_DIR" ]]; then
    mkdir -p "$SETTINGS_DIR"
    log "Making dir..."
  fi

  if [[ ! -f "$CONFIG" ]]; then
    touch "$CONFIG"
    log "No config file found, generating new one..."
    echo "$CONFIG_TEMPLATE" > "$CONFIG"

    log "Config file generated using template config. Please edit via '$PROG config'."
    exit 1
  fi

  source "$CONFIG"
}

mcsm::start() {
  log "Starting server..."

  cd "$server_home_directory" || exit 1

  if [[ -x start.sh ]]; then
    screen -h 512 -dmS "$service_name" ./start.sh
    log "$server_name started (using custom startup script)"
  else
    screen -h 512 -dmS "$service_name" java -jar -Xmx"$max_memory" "$server_jar" "$extra_params"
    log "$server_name started"
  fi
}

mcsm::stop() {
  log "Stopping $server_name..."

  if [[ "$time_before_shutdown" ]] && [[ "$time_before_shutdown" -gt 0 ]]; then
    mcsm::exec "say The server will be shutting down in $time_before_shutdown seconds"
    sleep "$time_before_shutdown"
  fi
  mcsm::exec "save-all"
  mcsm::exec "stop"
  log "$server_name stopped"
}

mcsm::exec() {
  screen -S "$service_name" -p 0 -X stuff "$(printf "%s\\r" "$1")"
}

mcsm::console() {
  screen -r "$service_name"
}

mcsm::log() {
  logfile="$server_home_directory/logs/latest.log"
  [[ ! -f "$logfile" ]] && fail "Could not find latest.log"
  less "$server_home_directory/logs/latest.log"
}

mcsm::isRunning() {
  if screen -q -S "$service_name" -Q title >/dev/null; then
    return 0
  else
    return 1
  fi
}

mcsm::ensureRunning() {
  mcsm::isRunning || fail "The server is not running."
}

#Start of script
mcsm::setup

case "$1" in
  start)
    if mcsm::isRunning; then
      fail "Server is already running!"
    fi

    mcsm::start
    ;;
  stop)
    mcsm::ensureRunning
    mcsm::stop
    ;;
  restart)
    if mcsm::isRunning; then
      mcsm::stop
      sleep 0.5
    else
      log "Server was not running, starting immediately"
    fi
    mcsm::start
    ;;
  cmd)
    mcsm::ensureRunning

    if [ $# -lt 1 ]; then
      fail "Please specify a command (e.g. 'save-all')"
    fi

    shift
    mcsm::exec "$*"
    ;;
  console)
    mcsm::ensureRunning
    mcsm::console
    ;;
  log)
    mcsm::log
    ;;
  config)
    "${VISUAL:-nano}" "$CONFIG"
    ;;
  *)
    # bold
    BOLD="$(tput bold)"
    # reset
    R="$(tput sgr0)"
    # main color - yellow
    MAIN="$(tput setaf 3)"
    # light color - gray
    LIGHT="$(tput setaf 7)"
    # decorator color - red
    DECO="$(tput setaf 1)"
    echo
    echo "${DECO}${BOLD}===${R} Welcome to ${MAIN}Minecraft Server Manager!${R} ${DECO}${BOLD}===${R}"
    echo "${DECO}${BOLD}>>>>${R} Written by ${MAIN}Rayzr522${R} ${DECO}${BOLD}||${R} ${LIGHT}git.io/mcsm${R} ${DECO}${BOLD}<<<<${R}"
    echo
    echo "${BOLD}Usage:${R} $PROG <command>"
    echo
    echo "${BOLD}Commands:${R}"
    echo "  start         ${DECO}|${R} starts the server"
    echo "  stop          ${DECO}|${R} stops the server"
    echo "  restart       ${DECO}|${R} restarts the server"
    echo "  cmd <command> ${DECO}|${R} executes the given command in console"
    echo "  log           ${DECO}|${R} opens the log file"
    echo "  config        ${DECO}|${R} opens the config file in your \$VISUAL editor (nano is default)"
    echo
    exit 1
    ;;
esac
